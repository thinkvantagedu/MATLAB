% clear; clc;
% %%
% nd = 2;
% nt = 40;
% x = 1:nt;
% acce = 'average';
% dt = 0.1;
% maxt = dt * (nt - 1);
% k = [6 -2; -2 4];
% m = [2 0; 0 1];
% c = [0 0; 0 0];
% %%
% 
% u0 = [0; 0];
% v0 = [0; 0];
% 
% phi = [3 2; 1 4];
% 
% 
% 
% %% original theory: impulse = K * phivec.
% kphi1 = k * phi(:, 1);
% kphi2 = k * phi(:, 2);
% 
% % set up initial and successive impulses.
% fk1init = zeros(nd, nt);
% fk1init(:, 1) = fk1init(:, 1) + kphi1;
% 
% fk1after = zeros(nd, nt);
% fk1after(:, 2) = fk1after(:, 2) + kphi1;
% %
% fk2init = zeros(nd, nt);
% fk2init(:, 1) = fk2init(:, 1) + kphi2;
% 
% fk2after = zeros(nd, nt);
% fk2after(:, 2) = fk2after(:, 2) + kphi2;
% 
% % apply impulses on system
% phiid = eye(2);
% 
% [ufk1init, ~, ~, ~, ~, ~, ~, ~] = NewmarkBetaReducedMethod...
%     (phiid, m, c, k, fk1init, acce, dt, maxt, u0, v0);
% 
% [ufk1after, ~, ~, ~, ~, ~, ~, ~] = NewmarkBetaReducedMethod...
%     (phiid, m, c, k, fk1after, acce, dt, maxt, u0, v0);
% 
% [ufk2init, ~, ~, ~, ~, ~, ~, ~] = NewmarkBetaReducedMethod...
%     (phiid, m, c, k, fk2init, acce, dt, maxt, u0, v0);
% 
% [ufk2after, ~, ~, ~, ~, ~, ~, ~] = NewmarkBetaReducedMethod...
%     (phiid, m, c, k, fk2after, acce, dt, maxt, u0, v0);
% 
% % apply translation, reconstruct solutions.
% 
% ufk1 = zeros(nd, nt);
% for i = 1:nt
%     
%     if i == 1
%         ufk1 = ufk1 + ufk1init;
%     else
%         ufk1shift = [zeros(nd, i - 2) ufk1after(:, 1:(nt - i + 2))];
%         ufk1 = ufk1 + ufk1shift;
%     end
%     
% end
% 
% 
% %% implementation: force = K * Phi.
% kphi = k * phi;
% 
% fkinit = zeros(nd, nt + 1);
% fkinit(:, 1:nd) = fkinit(:, 1:nd) + kphi;
% 
% fkafter = zeros(nd, nt + 1);
% fkafter(:, nd + 1: nd * 2) = fkafter(:, nd + 1 : nd * 2) + kphi;
% 
% [ufkinit, ~, ~, ~, ~, ~, ~, ~] = NewmarkBetaReducedMethod...
%     (phiid, m, c, k, fkinit, acce, dt, maxt, u0, v0);
% 
% [ufkafter, ~, ~, ~, ~, ~, ~, ~] = NewmarkBetaReducedMethod...
%     (phiid, m, c, k, fkafter, acce, dt, maxt, u0, v0);
% 
% %% compute alpha
% alpha = sin(1:40) + 2;
% 
% hold on
% ufk = zeros(nd, nt);
% for j = 1:nt / nd
%     
%     if j == 1
%         hinit = plot(x-1, 3 * ufkinit(1, :), 'r');
%         halpha =scatter(j - 1, alpha(1, j), 100, 'k', '+');
%         ufk = ufk + ufkinit;
%         hinit.LineWidth = 2;
%         halpha.LineWidth = 2;
%     elseif j == 2
%         
%         ufkshift = [zeros(nd, nd * (j - 2)) 3 * ufkafter(:, 1:(nt - nd * j + 4))];
%         hshift2 = plot(x, ufkshift(1, :), 'b');
%         halpha =scatter(j * 2 - 2, alpha(1, j), 100, 'k', '+');
%         ufk = ufk + ufkshift;
%         hshift2.LineWidth = 2;
%         halpha.LineWidth = 2;
%     else
%         ufkshift = [zeros(nd, nd * (j - 2)) 3 * ufkafter(:, 1:(nt - nd * j + 4))];
%         hshift = plot(x, ufkshift(1, :), '-.b');
%         halpha =scatter(j * 2 - 2, alpha(1, j), 100, 'k', '+');
%         ufk = ufk + ufkshift;
%         hshift.LineWidth = 2;
%         halpha.LineWidth = 2;
%     end
% end
% 
% axis([0 40 -5 5])
% 
% ftsize = 20;
% 
% xla = xlabel('time');
% yla = ylabel('amplitude');
% xla.FontSize = ftsize;
% yla.FontSize = ftsize;
% 
% uin = 'Initial response';
% usu2 = 'Successive response';
% usu = 'Successive responses from shift';
% alphah = 'reduced variables';
% lgd = legend([hinit hshift2 hshift halpha], uin, usu2, usu, alphah, 'Interpreter', 'latex');
% lgd.FontSize = ftsize;
% 
% set(gca,'xticklabel',{[]})
% set(gca,'yticklabel',{[]})
% 
% grid on
clf
nd = fixie.no.dof;
npoint = 252;
x = 0:fixie.time.step:fixie.time.max;
nt = fixie.no.t_step;
% impulse = fixie.imp.store.mtx{2, 1};
% figure(1)
% plot(x, impulse(nd, :), 'k', 'LineWidth', 3)
% xlabel('time')
% ylabel('force amplitude')
% set(gca, 'FontSize', 30)
% grid on

% the selected impulse response. 
respIni = fixie.resp.store.tDiff{2, 2, 1, 1};
respIni = respIni{1} * respIni{2} * respIni{3}';
respSuc = fixie.resp.store.tDiff{2, 2, 2, 1};
respSuc = respSuc{1} * respSuc{2} * respSuc{3}';
hold on
for ip = nt:-1
    if ip ~= 1 && ip ~= 2
        ufkshift = [zeros(nd, ip - 2) respSuc(:, 1:(nt - ip + 2))];
        hshift = plot(x, ufkshift(npoint, :), 'k');
        hshift.LineWidth = 0.5;
    elseif ip == 2
        ufkshift = [zeros(nd, ip - 2) respSuc(:, 1:(nt - ip + 2))];
        hshift2 = plot(x, ufkshift(npoint, :), 'b');
        hshift2.LineWidth = 3;
    elseif ip == 1
        hinit = plot(x, respIni(npoint, :), 'm');
        hinit.LineWidth = 3;
    end
%     if ip == 1
%         hinit = plot(x, respIni(npoint, :), 'm');
%         hinit.LineWidth = 3;
%     elseif ip == 2
%         
%         ufkshift = [zeros(nd, ip - 2) respSuc(:, 1:(nt - ip + 2))];
%         hshift2 = plot(x, ufkshift(npoint, :), 'b');
%         hshift2.LineWidth = 3;
%     else
%         ufkshift = [zeros(nd, ip - 2) respSuc(:, 1:(nt - ip + 2))];
%         hshift = plot(x, ufkshift(npoint, :), 'k');
%         hshift.LineWidth = 0.5;
%     end
    
end

% node 126 is coord (45, 0), which is the lower center of the beam. DoF 252
% is y-displacement.
% figure(2)
% plot(x, respIni(npoint, :), 'b-.', 'LineWidth', 3)
uin = 'Initial response';
usu2 = 'Successive response';
usu = 'Successive responses from shift';
legend([hinit hshift2 hshift], uin, usu2, usu, 'Interpreter', 'latex');
xlabel('time')
ylabel('displacement')
set(gca, 'FontSize', 30)
grid minor









