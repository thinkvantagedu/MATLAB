%%
profile on
i_cnt=1;
sigma.store = [];
err.match = abs(err.max.val0);
err.bd=1e-4;
%%
seq.int = 1;
err.indc.loop = 2;


while err.match > err.bd
    % compute the next exact solution.
    % test_NO = 1;
    % for i_test = 1:test_NO
    pm.iter.I1 = pm.space.I1(err.loc.val.max(1, 1));
    pm.iter.I2 = pm.space.I2(err.loc.val.max(1, 2));
    
    MTX_K.iter.exact = MTX_K.I1120S0*pm.iter.I1+MTX_K.I1021S0*pm.iter.I2+MTX_K.I1020S1*pm.fix.I3;
    
    [~, ~, ~, Dis.iter.exact, ~, ~, ~, ~] = ...
        NewmarkBetaReducedMethod(phi.ident, MTX_M.mtx, MTX_C.mtx, MTX_K.iter.exact, ...
        fce.val, NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
    %% new basis from error (current exact - previous appro).
    ERR.iter.store = Dis.iter.exact-Dis.all.appr;
    Nphi.iter = 1;
    [phi.fre.ERR, ~, sigma.val] = SVDmod(ERR.iter.store, Nphi.iter);
    sigma.store=[sigma.store; nonzeros(sigma.val)];
    phi.fre.all = [phi.fre.all phi.fre.ERR];
    phi.fre.all = GramSchmidtNew(phi.fre.all);
    no.rb = size(phi.fre.all, 2);
    %%
    MTX_K.RE.I1120S0 = phi.fre.all'*MTX_K.I1120S0*phi.fre.all;
    MTX_K.RE.I1021S0 = phi.fre.all'*MTX_K.I1021S0*phi.fre.all;
    MTX_K.RE.I1020S1 = phi.fre.all'*MTX_K.I1020S1*phi.fre.all;
    MTX_M.RE.iter = phi.fre.all'*MTX_M.mtx*phi.fre.all;
    MTX_C.RE.iter = phi.fre.all'*MTX_C.mtx*phi.fre.all;
    
    Dis.RE.inpt = sparse(no.rb, 1);
    Vel.RE.inpt = sparse(no.rb, 1);
    
    fce.RE.iter = phi.fre.all'*fce.val;
    
    err.indc.max = 2;
    err.indc.thres = 1;
    err.store.val = zeros(domain.length.I1, domain.length.I2);
    method.time = 'itpl';
    switch method.time
        case 'asemb'
            for i_iter = 1:size(pm.space.comb, 1)
                %% compute alpha and ddot alpha for each PP.
                MTX_K.RE.iter = MTX_K.RE.I1120S0*pm.space.comb(i_iter, 3)+...
                    MTX_K.RE.I1021S0*pm.space.comb(i_iter, 4)+...
                    MTX_K.RE.I1020S1*pm.fix.I3;
                MTX_K.iter.loop = MTX_K.I1120S0*pm.space.comb(i_iter, 3)+...
                    MTX_K.I1021S0*pm.space.comb(i_iter, 4)+...
                    MTX_K.I1020S1*pm.fix.I3;
                [Dis.RE.otpt, Vel.RE.otpt, Acc.RE.otpt, ...
                    ~, ~, ~, ~, ~] = NewmarkBetaReducedMethod...
                    (phi.fre.all, MTX_M.RE.iter, MTX_C.RE.iter, MTX_K.RE.iter, ...
                    fce.RE.iter, NMcoef, time.step, time.max, Dis.RE.inpt, Vel.RE.inpt);
                %% assemble force vector.
                [fce.asemb.vec] = NewmarkBetaReducedMethodAssembleForceVector...
                    (fce.val, time.step, time.max);
                %% assemble the giant matrix.
                [MTX_A] = NewmarkBetaReducedMethodAssembleSysMTX...
                    (MTX_M.mtx, MTX_C.mtx, MTX_K.iter.loop, ...
                    NMcoef, time.step, time.max);
                %% assemble phi matrix.
                [phi.fre.mtx] = NewmarkAssemblePhiMtx(phi.fre.all, no.dof, no.t_step);
                [rv.vec] = NewmarkAssembleReducedVariableVector...
                    (Acc.RE.otpt, Vel.RE.otpt, Dis.RE.otpt, no.t_step);
                res_store.fix = MTX_A*phi.fre.mtx;
                res_store.load = res_store.fix*rv.vec;
                res_store.vec = fce.asemb.vec-res_store.load;
                res_store.mtx = zeros(3*no.dof, no.t_step);
                for i_res = 1:no.t_step
                    
                    res_store.mtx(:, i_res) = res_store.mtx(:, i_res)+...
                        res_store.vec(3*(i_res-1)*no.dof+1:3*i_res*no.dof);
                    
                end
                err.vec = MTX_A\res_store.vec;
                %% order of err.mtx is acc, vel, dis.
                err.mtx = zeros(3*no.dof, no.t_step);
                for i_res = 1:no.t_step
                    
                    err.mtx(:, i_res) = err.mtx(:, i_res)+...
                        err.vec(3*(i_res-1)*no.dof+1:3*i_res*no.dof);
                    
                end
                err.dis = err.mtx((2*no.dof+1):3*no.dof, :);
                
            end
            keyboard
        case 'decomp'
            imp.store.M = MTX_M.mtx*phi.fre.all;
            imp.store.C = MTX_C.mtx*phi.fre.all;
            imp.store.K.I1120S0 = MTX_K.I1120S0*phi.fre.all;
            imp.store.K.I1021S0 = MTX_K.I1021S0*phi.fre.all;
            imp.store.K.I1020S1 = MTX_K.I1020S1*phi.fre.all;
            for i_iter = 1:size(pm.space.comb, 1)
                %% compute alpha and ddot alpha for each PP.
                MTX_K.RE.iter = MTX_K.RE.I1120S0*pm.space.comb(i_iter, 3)+...
                    MTX_K.RE.I1021S0*pm.space.comb(i_iter, 4)+MTX_K.RE.I1020S1*pm.fix.I3;
                MTX_K.iter.loop = MTX_K.I1120S0*pm.space.comb(i_iter, 3)+...
                    MTX_K.I1021S0*pm.space.comb(i_iter, 4)+MTX_K.I1020S1*pm.fix.I3;
                [Dis.RE.otpt, Vel.RE.otpt, Acc.RE.otpt, ...
                    ~, ~, ~, ~, ~] = NewmarkBetaReducedMethod...
                    (phi.fre.all, MTX_M.RE.iter, MTX_C.RE.iter, MTX_K.RE.iter, ...
                    fce.RE.iter, NMcoef, time.step, time.max, ...
                    Dis.RE.inpt, Vel.RE.inpt);
                %% response from force.
                [~, ~, ~, Dis.asemb.fce, ~, ~, ~, ~] = NewmarkBetaReducedMethod...
                    (phi.ident, MTX_M.mtx, MTX_C.mtx, MTX_K.iter.loop, ...
                    fce.val, NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                
                loc.init = 1;
                loc.step = 2;
                
                %% generate impulse response from initial impulse and step impulse, each
                %% size = no.rb*no.dof, no.t_Step.
                Dis.storerb.init.M = GSAImpulseSolutionStoreRB...
                    (imp.store.M, loc.init, no.dof, no.t_step, no.rb, phi.ident, ...
                    MTX_M.mtx, MTX_C.mtx, MTX_K.iter.loop, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                Dis.storerb.step.M = GSAImpulseSolutionStoreRB...
                    (imp.store.M, loc.step, no.dof, no.t_step, no.rb, phi.ident, ...
                    MTX_M.mtx, MTX_C.mtx, MTX_K.iter.loop, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                
                Dis.storerb.init.K.I1120S0 = GSAImpulseSolutionStoreRB...
                    (imp.store.K.I1120S0, loc.init, no.dof, no.t_step, no.rb, phi.ident, ...
                    MTX_M.mtx, MTX_C.mtx, MTX_K.iter.loop, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                Dis.storerb.step.K.I1120S0 = GSAImpulseSolutionStoreRB...
                    (imp.store.K.I1120S0, loc.step, no.dof, no.t_step, no.rb, phi.ident, ...
                    MTX_M.mtx, MTX_C.mtx, MTX_K.iter.loop, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                
                Dis.storerb.init.K.I1021S0 = GSAImpulseSolutionStoreRB...
                    (imp.store.K.I1021S0, loc.init, no.dof, no.t_step, no.rb, phi.ident, ...
                    MTX_M.mtx, MTX_C.mtx, MTX_K.iter.loop, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                Dis.storerb.step.K.I1021S0 = GSAImpulseSolutionStoreRB...
                    (imp.store.K.I1021S0, loc.step, no.dof, no.t_step, no.rb, phi.ident, ...
                    MTX_M.mtx, MTX_C.mtx, MTX_K.iter.loop, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                
                Dis.storerb.init.K.I1020S1 = GSAImpulseSolutionStoreRB...
                    (imp.store.K.I1020S1, loc.init, no.dof, no.t_step, no.rb, phi.ident, ...
                    MTX_M.mtx, MTX_C.mtx, MTX_K.iter.loop, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                Dis.storerb.step.K.I1020S1 = GSAImpulseSolutionStoreRB...
                    (imp.store.K.I1020S1, loc.step, no.dof, no.t_step, no.rb, phi.ident, ...
                    MTX_M.mtx, MTX_C.mtx, MTX_K.iter.loop, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                %%
                Dis.asemb.M = zeros(no.dof, no.t_step);
                Dis.asemb.K.I1120S0 = zeros(no.dof, no.t_step);
                Dis.asemb.K.I1021S0 = zeros(no.dof, no.t_step);
                Dis.asemb.K.I1020S1 = zeros(no.dof, no.t_step);
                for i_time = 1:no.t_step
                    for i_rb = 1:no.rb
                        if i_time == 1
                            Dis.asemb.M = Dis.asemb.M+...
                                Dis.storerb.init.M((i_rb-1)*no.dof+1:i_rb*no.dof, :)*...
                                Acc.RE.otpt(i_rb, 1);
                            Dis.asemb.K.I1120S0 = Dis.asemb.K.I1120S0+...
                                Dis.storerb.init.K.I1120S0((i_rb-1)*no.dof+1:i_rb*no.dof, :)*...
                                Dis.RE.otpt(i_rb, 1);
                            Dis.asemb.K.I1021S0 = Dis.asemb.K.I1021S0+...
                                Dis.storerb.init.K.I1021S0((i_rb-1)*no.dof+1:i_rb*no.dof, :)*...
                                Dis.RE.otpt(i_rb, 1);
                            Dis.asemb.K.I1020S1 = Dis.asemb.K.I1020S1+...
                                Dis.storerb.init.K.I1020S1((i_rb-1)*no.dof+1:i_rb*no.dof, :)*...
                                Dis.RE.otpt(i_rb, 1);
                            
                        elseif i_time>1
                            % Dis.zeros starts from 0 columns,
                            % otherwise there will be 2 zeros
                            % columns.
                            Dis.zero.M = zeros(no.dof, i_time-2);
                            Dis.nonzero.M = ...
                                Dis.storerb.step.M((i_rb-1)*no.dof+1:i_rb*no.dof, 1:(no.t_step-i_time+2));
                            Dis.imp.M = [Dis.zero.M Dis.nonzero.M];
                            Dis.asemb.M = Dis.asemb.M+...
                                Dis.imp.M*Acc.RE.otpt(i_rb, i_time);
                            
                            Dis.zero.K.I1120S0 = zeros(no.dof, i_time-2);
                            Dis.nonzero.K.I1120S0 = ...
                                Dis.storerb.step.K.I1120S0((i_rb-1)*no.dof+1:i_rb*no.dof, 1:(no.t_step-i_time+2));
                            Dis.imp.K.I1120S0 = [Dis.zero.K.I1120S0 Dis.nonzero.K.I1120S0];
                            Dis.asemb.K.I1120S0 = Dis.asemb.K.I1120S0+...
                                Dis.imp.K.I1120S0*Dis.RE.otpt(i_rb, i_time);
                            
                            Dis.zero.K.I1021S0 = zeros(no.dof, i_time-2);
                            Dis.nonzero.K.I1021S0 = ...
                                Dis.storerb.step.K.I1021S0((i_rb-1)*no.dof+1:i_rb*no.dof, 1:(no.t_step-i_time+2));
                            Dis.imp.K.I1021S0 = [Dis.zero.K.I1021S0 Dis.nonzero.K.I1021S0];
                            Dis.asemb.K.I1021S0 = Dis.asemb.K.I1021S0+...
                                Dis.imp.K.I1021S0*Dis.RE.otpt(i_rb, i_time);
                            
                            Dis.zero.K.I1020S1 = zeros(no.dof, i_time-2);
                            Dis.nonzero.K.I1020S1 = ...
                                Dis.storerb.step.K.I1020S1((i_rb-1)*no.dof+1:i_rb*no.dof, 1:(no.t_step-i_time+2));
                            Dis.imp.K.I1020S1 = [Dis.zero.K.I1020S1 Dis.nonzero.K.I1020S1];
                            Dis.asemb.K.I1020S1 = Dis.asemb.K.I1020S1+...
                                Dis.imp.K.I1020S1*Dis.RE.otpt(i_rb, i_time);
                            
                        end
                        
                    end
                    
                end
                
                Dis.asemb.K.total = Dis.asemb.K.I1120S0*pm.space.comb(i_iter, 3)+...
                    Dis.asemb.K.I1021S0*pm.space.comb(i_iter, 4)+...
                    Dis.asemb.K.I1020S1*pm.fix.I3;
                err.mtx = Dis.asemb.fce-Dis.asemb.M-Dis.asemb.K.total;
                err.val = norm(err.mtx, 'fro')/norm(Dis.trial.exact, 'fro');
                err.store.val(i_iter) = err.store.val(i_iter)+err.val;
                
            end
            keyboard
        case 'itpl'
            %% OFFLINE
            pm.pre.loc.all.corner = {[domain.bond.L.I1, domain.bond.L.I2; domain.bond.R.I1, domain.bond.L.I2; ...
                domain.bond.L.I1, domain.bond.R.I2; domain.bond.R.I1, domain.bond.R.I2]};
            
            % generate impulses.
            imp.store.M = MTX_M.mtx*phi.fre.all;
            imp.store.C = MTX_C.mtx*phi.fre.all;
            imp.store.K1120S0 = MTX_K.I1120S0*phi.fre.all;
            imp.store.K1021S0 = MTX_K.I1021S0*phi.fre.all;
            imp.store.K1020S1 = MTX_K.I1020S1*phi.fre.all;
            imp.loc.init = 1;
            imp.loc.step = 2;
            
            pm.pre.val.block = 10.^pm.pre.loc.all.corner{:};
            no.pre = size(pm.pre.val.block, 1);
            
            % pre-computation from force.
            resp.store.fce = zeros(no.pre*no.dof, no.t_step);
            for i_fce = 1:no.pre
                MTX_K.resp.fce = ...
                    MTX_K.I1120S0*pm.pre.val.block(i_fce, 1)+...
                    MTX_K.I1021S0*pm.pre.val.block(i_fce, 2)+MTX_K.I1020S1*pm.fix.I3;
                [~, ~, ~, resp.val.fce, ~, ~, ~, ~] = NewmarkBetaReducedMethod...
                    (phi.ident, MTX_M.mtx, MTX_C.mtx, MTX_K.resp.fce, ...
                    fce.val, NMcoef, time.step, time.max, ...
                    Dis.inpt, Vel.inpt);
                resp.store.fce((i_fce-1)*no.dof+1:i_fce*no.dof, :) = ...
                    resp.store.fce((i_fce-1)*no.dof+1:i_fce*no.dof, :)+resp.val.fce;
            end
            resp.coef.fce = LagInterpolationCoeff(pm.pre.val.block, resp.store.fce);
            %===========================================================================
            % 1. pre-computation from mass, damping, stiffness1, stiffness2, stiffnessS.
            
            resp.coef.init.glob.M = zeros(no.pre*no.rb*no.dof, no.t_step);
            resp.coef.step.glob.M = zeros(no.pre*no.rb*no.dof, no.t_step);
            resp.coef.init.glob.C = zeros(no.pre*no.rb*no.dof, no.t_step);
            resp.coef.step.glob.C = zeros(no.pre*no.rb*no.dof, no.t_step);
            resp.coef.init.glob.K1120S0 = zeros(no.pre*no.rb*no.dof, no.t_step);
            resp.coef.step.glob.K1120S0 = zeros(no.pre*no.rb*no.dof, no.t_step);
            resp.coef.init.glob.K1021S0 = zeros(no.pre*no.rb*no.dof, no.t_step);
            resp.coef.step.glob.K1021S0 = zeros(no.pre*no.rb*no.dof, no.t_step);
            resp.coef.init.glob.K1020S1 = zeros(no.pre*no.rb*no.dof, no.t_step);
            resp.coef.step.glob.K1020S1 = zeros(no.pre*no.rb*no.dof, no.t_step);
            for i_m_rb = 1:no.rb
                %
                [resp.coef.init.local.M, resp.coef.step.local.M] = GSAPreComputeCoefStore...
                    (i_m_rb, no.dof, no.t_step, no.pre, imp.store.M, imp.loc.init, imp.loc.step, ...
                    pm.pre.val.block, pm.fix.I3, phi.ident, MTX_M.mtx, MTX_C.mtx, ...
                    MTX_K.I1120S0, MTX_K.I1021S0, MTX_K.I1020S1, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                resp.coef.init.glob.M((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :) = ...
                    resp.coef.init.glob.M((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :)+...
                    resp.coef.init.local.M;
                resp.coef.step.glob.M((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :) = ...
                    resp.coef.step.glob.M((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :)+...
                    resp.coef.step.local.M;
                %
                [resp.coef.init.local.C, resp.coef.step.local.C] = GSAPreComputeCoefStore...
                    (i_m_rb, no.dof, no.t_step, no.pre, imp.store.C, imp.loc.init, imp.loc.step, ...
                    pm.pre.val.block, pm.fix.I3, phi.ident, MTX_M.mtx, MTX_C.mtx, ...
                    MTX_K.I1120S0, MTX_K.I1021S0, MTX_K.I1020S1, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                resp.coef.init.glob.C((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :) = ...
                    resp.coef.init.glob.C((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :)+...
                    resp.coef.init.local.C;
                resp.coef.step.glob.C((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :) = ...
                    resp.coef.step.glob.C((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :)+...
                    resp.coef.step.local.C;
                %
                [resp.coef.init.local.K1120S0, resp.coef.step.local.K1120S0] = GSAPreComputeCoefStore...
                    (i_m_rb, no.dof, no.t_step, no.pre, imp.store.K1120S0, imp.loc.init, imp.loc.step, ...
                    pm.pre.val.block, pm.fix.I3, phi.ident, MTX_M.mtx, MTX_C.mtx, ...
                    MTX_K.I1120S0, MTX_K.I1021S0, MTX_K.I1020S1, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                resp.coef.init.glob.K1120S0((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :) = ...
                    resp.coef.init.glob.K1120S0((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :)+...
                    resp.coef.init.local.K1120S0;
                resp.coef.step.glob.K1120S0((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :) = ...
                    resp.coef.step.glob.K1120S0((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :)+...
                    resp.coef.step.local.K1120S0;
                %
                [resp.coef.init.local.K1021S0, resp.coef.step.local.K1021S0] = GSAPreComputeCoefStore...
                    (i_m_rb, no.dof, no.t_step, no.pre, imp.store.K1021S0, imp.loc.init, imp.loc.step, ...
                    pm.pre.val.block, pm.fix.I3, phi.ident, MTX_M.mtx, MTX_C.mtx, ...
                    MTX_K.I1120S0, MTX_K.I1021S0, MTX_K.I1020S1, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                resp.coef.init.glob.K1021S0((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :) = ...
                    resp.coef.init.glob.K1021S0((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :)+...
                    resp.coef.init.local.K1021S0;
                resp.coef.step.glob.K1021S0((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :) = ...
                    resp.coef.step.glob.K1021S0((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :)+...
                    resp.coef.step.local.K1021S0;
                %
                [resp.coef.init.local.K1020S1, resp.coef.step.local.K1020S1] = GSAPreComputeCoefStore...
                    (i_m_rb, no.dof, no.t_step, no.pre, imp.store.K1020S1, imp.loc.init, imp.loc.step, ...
                    pm.pre.val.block, pm.fix.I3, phi.ident, MTX_M.mtx, MTX_C.mtx, ...
                    MTX_K.I1120S0, MTX_K.I1021S0, MTX_K.I1020S1, ...
                    NMcoef, time.step, time.max, Dis.inpt, Vel.inpt);
                resp.coef.init.glob.K1020S1((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :) = ...
                    resp.coef.init.glob.K1020S1((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :)+...
                    resp.coef.init.local.K1020S1;
                resp.coef.step.glob.K1020S1((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :) = ...
                    resp.coef.step.glob.K1020S1((i_m_rb-1)*no.pre*no.dof+1:i_m_rb*no.pre*no.dof, :)+...
                    resp.coef.step.local.K1020S1;
            end
            
            %% ONLINE
            err.store.val = zeros(domain.length.I1, domain.length.I2);
            err.log_store.val = zeros(domain.length.I1, domain.length.I2);
            err_sqr.store = zeros(domain.length.I1, domain.length.I2);
            tic
            % define quantity of interest with a rectangular frame.
            qoi.l = -1;
            qoi.r = 91;
            qoi.u = 21;
            qoi.d = -0.5;
            [qoi.seq, no.qoi.node, qoi.dof, no.qoi.dof] = GSAQoI_Info(node, qoi.l, qoi.r, qoi.u, qoi.d);
            disp(qoi.seq)
            % define a time window. min t.l = time.step/time.step, max t.r = no.t_step.
            qoi.t.r = no.t_step;
            for i_iter = 1:size(pm.space.comb, 1)
                
                pm.loop.I1 = pm.space.comb(i_iter, 3);
                pm.loop.I2 = pm.space.comb(i_iter, 4);
                % interpolate response from force.
                [resp.itpl.fce] = LagInterpolationOtptSingle...
                    (resp.coef.fce, pm.loop.I1, pm.loop.I2, no.pre);
                resp.qoi.fce = resp.itpl.fce(qoi.dof, 1:qoi.t.r);
                % compute alpha and ddot alpha for each PP.
                MTX_K.RE.iter = MTX_K.RE.I1120S0*pm.space.comb(i_iter, 3)+...
                    MTX_K.RE.I1021S0*pm.space.comb(i_iter, 4)+...
                    MTX_K.RE.I1020S1*pm.fix.I3;
                MTX_K.iter.loop = MTX_K.I1120S0*pm.space.comb(i_iter, 3)+...
                    MTX_K.I1021S0*pm.space.comb(i_iter, 4)+...
                    MTX_K.I1020S1*pm.fix.I3;
                [Dis.RE.otpt, Vel.RE.otpt, Acc.RE.otpt, ~, ~, ~, ~, ~] = NewmarkBetaReducedMethod...
                    (phi.fre.all, MTX_M.RE.iter, MTX_C.RE.iter, MTX_K.RE.iter, ...
                    fce.RE.iter, NMcoef, time.step, time.max, Dis.RE.inpt, Vel.RE.inpt);
                %===========================================================================
                % 2. interpolate response from mass, damping, stiffness coefficient.
                resp.otpt.init.glob.M = zeros(no.rb*no.qoi.dof, qoi.t.r);
                resp.otpt.step.glob.M = zeros(no.rb*no.qoi.dof, qoi.t.r);
                resp.otpt.init.glob.C = zeros(no.rb*no.qoi.dof, qoi.t.r);
                resp.otpt.step.glob.C = zeros(no.rb*no.qoi.dof, qoi.t.r);
                resp.otpt.init.glob.K1120S0 = zeros(no.rb*no.qoi.dof, qoi.t.r);
                resp.otpt.step.glob.K1120S0 = zeros(no.rb*no.qoi.dof, qoi.t.r);
                resp.otpt.init.glob.K1021S0 = zeros(no.rb*no.qoi.dof, qoi.t.r);
                resp.otpt.step.glob.K1021S0 = zeros(no.rb*no.qoi.dof, qoi.t.r);
                resp.otpt.init.glob.K1020S1 = zeros(no.rb*no.qoi.dof, qoi.t.r);
                resp.otpt.step.glob.K1020S1 = zeros(no.rb*no.qoi.dof, qoi.t.r);
                for i_itpl = 1:no.rb
                    %
                    % size = no.qoi.dof, no.qoi.t_step.
                    [resp.otpt.init.local.M, resp.otpt.step.local.M] = GSAInterpolateRespFromCoef...
                        (i_itpl, no.pre, no.dof, pm.loop.I1, pm.loop.I2, ...
                        resp.coef.init.glob.M, resp.coef.step.glob.M, ...
                        qoi.dof, no.qoi.dof, qoi.t.r);
                    % size = (no.rb*no.qoi.dof).
                    resp.otpt.init.glob.M((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :) = ...
                        resp.otpt.init.glob.M((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :)+...
                        resp.otpt.init.local.M;
                    resp.otpt.step.glob.M((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :) = ...
                        resp.otpt.step.glob.M((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :)+...
                        resp.otpt.step.local.M;
                    
                    %
                    [resp.otpt.init.local.C, resp.otpt.step.local.C] = GSAInterpolateRespFromCoef...
                        (i_itpl, no.pre, no.dof, pm.loop.I1, pm.loop.I2, ...
                        resp.coef.init.glob.C, resp.coef.step.glob.C, ...
                        qoi.dof, no.qoi.dof, qoi.t.r);
                    resp.otpt.init.glob.C((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :) = ...
                        resp.otpt.init.glob.C((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :)+...
                        resp.otpt.init.local.C;
                    resp.otpt.step.glob.C((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :) = ...
                        resp.otpt.step.glob.C((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :)+...
                        resp.otpt.step.local.C;
                    
                    %
                    [resp.otpt.init.local.K1120S0, resp.otpt.step.local.K1120S0] = ...
                        GSAInterpolateRespFromCoef...
                        (i_itpl, no.pre, no.dof, pm.loop.I1, pm.loop.I2, ...
                        resp.coef.init.glob.K1120S0, resp.coef.step.glob.K1120S0, ...
                        qoi.dof, no.qoi.dof, qoi.t.r);
                    resp.otpt.init.glob.K1120S0((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :) = ...
                        resp.otpt.init.glob.K1120S0((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :)+...
                        resp.otpt.init.local.K1120S0;
                    resp.otpt.step.glob.K1120S0((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :) = ...
                        resp.otpt.step.glob.K1120S0((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :)+...
                        resp.otpt.step.local.K1120S0;
                    
                    %
                    [resp.otpt.init.local.K1021S0, resp.otpt.step.local.K1021S0] = ...
                        GSAInterpolateRespFromCoef...
                        (i_itpl, no.pre, no.dof, pm.loop.I1, pm.loop.I2, ...
                        resp.coef.init.glob.K1021S0, resp.coef.step.glob.K1021S0, ...
                        qoi.dof, no.qoi.dof, qoi.t.r);
                    resp.otpt.init.glob.K1021S0((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :) = ...
                        resp.otpt.init.glob.K1021S0((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :)+...
                        resp.otpt.init.local.K1021S0;
                    resp.otpt.step.glob.K1021S0((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :) = ...
                        resp.otpt.step.glob.K1021S0((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :)+...
                        resp.otpt.step.local.K1021S0;
                    
                    %
                    [resp.otpt.init.local.K1020S1, resp.otpt.step.local.K1020S1] = ...
                        GSAInterpolateRespFromCoef...
                        (i_itpl, no.pre, no.dof, pm.loop.I1, pm.loop.I2, ...
                        resp.coef.init.glob.K1020S1, resp.coef.step.glob.K1020S1, ...
                        qoi.dof, no.qoi.dof, qoi.t.r);
                    resp.otpt.init.glob.K1020S1((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :) = ...
                        resp.otpt.init.glob.K1020S1((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :)+...
                        resp.otpt.init.local.K1020S1;
                    resp.otpt.step.glob.K1020S1((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :) = ...
                        resp.otpt.step.glob.K1020S1((i_itpl-1)*no.qoi.dof+1:i_itpl*no.qoi.dof, :)+...
                        resp.otpt.step.local.K1020S1;
                end
                %%{
                % 3. sum over time and rb for QoI only.
                resp.qoi.asemb.M = zeros(no.qoi.dof, qoi.t.r);
                resp.qoi.asemb.C = zeros(no.qoi.dof, qoi.t.r);
                resp.qoi.asemb.K1120S0 = zeros(no.qoi.dof, qoi.t.r);
                resp.qoi.asemb.K1021S0 = zeros(no.qoi.dof, qoi.t.r);
                resp.qoi.asemb.K1020S1 = zeros(no.qoi.dof, qoi.t.r);
                
                for i_sum = 1:qoi.t.r
                    for i_rb = 1:no.rb
                        if i_sum == 1
                            resp.qoi.local.M = resp.otpt.init.glob.M...
                                ((i_rb-1)*no.qoi.dof+1:i_rb*no.qoi.dof, 1:qoi.t.r);
                            resp.qoi.asemb.M = resp.qoi.asemb.M+...
                                resp.qoi.local.M*Acc.RE.otpt(i_rb, 1);
                            %%
                            resp.qoi.local.C = resp.otpt.init.glob.C...
                                ((i_rb-1)*no.qoi.dof+1:i_rb*no.qoi.dof, 1:qoi.t.r);
                            resp.qoi.asemb.C = resp.qoi.asemb.C+...
                                resp.qoi.local.C*Vel.RE.otpt(i_rb, 1);
                            
                            resp.qoi.local.K1120S0 = resp.otpt.init.glob.K1120S0...
                                ((i_rb-1)*no.qoi.dof+1:i_rb*no.qoi.dof, 1:qoi.t.r);
                            resp.qoi.asemb.K1120S0 = resp.qoi.asemb.K1120S0+...
                                resp.qoi.local.K1120S0*Dis.RE.otpt(i_rb, 1);
                            
                            resp.qoi.local.K1021S0 = resp.otpt.init.glob.K1021S0...
                                ((i_rb-1)*no.qoi.dof+1:i_rb*no.qoi.dof, 1:qoi.t.r);
                            resp.qoi.asemb.K1021S0 = resp.qoi.asemb.K1021S0+...
                                resp.qoi.local.K1021S0*Dis.RE.otpt(i_rb, 1);
                            
                            resp.qoi.local.K1020S1 = resp.otpt.init.glob.K1020S1...
                                ((i_rb-1)*no.qoi.dof+1:i_rb*no.qoi.dof, 1:qoi.t.r);
                            resp.qoi.asemb.K1020S1 = resp.qoi.asemb.K1020S1+...
                                resp.qoi.local.K1020S1*Dis.RE.otpt(i_rb, 1);
                            
                        else
                            resp.qoi.local.M = resp.otpt.step.glob.M...
                                ((i_rb-1)*no.qoi.dof+1:i_rb*no.qoi.dof, 1:qoi.t.r);
                            resp.zeros = zeros(no.qoi.dof, i_sum-2);
                            resp.nonzeros = ...
                                resp.qoi.local.M(:, 1:(qoi.t.r-i_sum+2));
                            resp.imp.M = [resp.zeros resp.nonzeros];
                            resp.qoi.asemb.M = resp.qoi.asemb.M+...
                                resp.imp.M*Acc.RE.otpt(i_rb, i_sum);
                            %%
                            resp.qoi.local.C = resp.otpt.step.glob.C...
                                ((i_rb-1)*no.qoi.dof+1:i_rb*no.qoi.dof, 1:qoi.t.r);
                            resp.zeros = zeros(no.qoi.dof, i_sum-2);
                            resp.nonzeros = ...
                                resp.qoi.local.C(:, 1:(qoi.t.r-i_sum+2));
                            resp.imp.C = [resp.zeros resp.nonzeros];
                            resp.qoi.asemb.C = resp.qoi.asemb.C+...
                                resp.imp.C*Vel.RE.otpt(i_rb, i_sum);
                            
                            resp.qoi.local.K1120S0 = resp.otpt.step.glob.K1120S0...
                                ((i_rb-1)*no.qoi.dof+1:i_rb*no.qoi.dof, 1:qoi.t.r);
                            resp.zeros = zeros(no.qoi.dof, i_sum-2);
                            resp.nonzeros = ...
                                resp.qoi.local.K1120S0(:, 1:(qoi.t.r-i_sum+2));
                            resp.imp.K1120S0 = [resp.zeros resp.nonzeros];
                            resp.qoi.asemb.K1120S0 = resp.qoi.asemb.K1120S0+...
                                resp.imp.K1120S0*Dis.RE.otpt(i_rb, i_sum);
                            
                            resp.qoi.local.K1021S0 = resp.otpt.step.glob.K1021S0...
                                ((i_rb-1)*no.qoi.dof+1:i_rb*no.qoi.dof, 1:qoi.t.r);
                            resp.zeros = zeros(no.qoi.dof, i_sum-2);
                            resp.nonzeros = ...
                                resp.qoi.local.K1021S0(:, 1:(qoi.t.r-i_sum+2));
                            resp.imp.K1021S0 = [resp.zeros resp.nonzeros];
                            resp.qoi.asemb.K1021S0 = resp.qoi.asemb.K1021S0+...
                                resp.imp.K1021S0*Dis.RE.otpt(i_rb, i_sum);
                            
                            resp.qoi.local.K1020S1 = resp.otpt.step.glob.K1020S1...
                                ((i_rb-1)*no.qoi.dof+1:i_rb*no.qoi.dof, 1:qoi.t.r);
                            resp.zeros = zeros(no.qoi.dof, i_sum-2);
                            resp.nonzeros = ...
                                resp.qoi.local.K1020S1(:, 1:(qoi.t.r-i_sum+2));
                            resp.imp.K1020S1 = [resp.zeros resp.nonzeros];
                            resp.qoi.asemb.K1020S1 = resp.qoi.asemb.K1020S1+...
                                resp.imp.K1020S1*Dis.RE.otpt(i_rb, i_sum);
                            
                        end
                    end
                end
                
                
                %===========================================================================
                resp.final = resp.qoi.fce-resp.qoi.asemb.M-resp.qoi.asemb.C-...
                    resp.qoi.asemb.K1120S0*pm.loop.I1-...
                    resp.qoi.asemb.K1021S0*pm.loop.I2-...
                    resp.qoi.asemb.K1020S1*pm.fix.I3;
                
%                 resp.final = -resp.qoi.asemb.M-resp.qoi.asemb.C-...
%                     resp.qoi.asemb.K1120S0*pm.loop.I1-...
%                     resp.qoi.asemb.K1021S0*pm.loop.I2-...
%                     resp.qoi.asemb.K1020S1*pm.fix.I3;
                
                err_sqr.store(i_iter) = err_sqr.store(i_iter)+sumsqr(resp.final);
                err.store.val(i_iter) = err.store.val(i_iter)+...
                    norm(resp.final, 'fro')/norm(Dis.trial.exact, 'fro');
                err.log_store.val(i_iter) = err.log_store.val(i_iter)+...
                    log10(norm(resp.final, 'fro')/norm(Dis.trial.exact, 'fro'));
                disp(i_iter)
                %}
                
            end
            
            toc
            keyboard
    end
    
    [err.max.val, err.loc.idx.max]=max(err.store.val(:));
    err.max.store=[err.max.store; err.max.val];
    pm.iter.row=pm.space.comb(err.loc.idx.max, :);
    err.loc.val.max=pm.iter.row(:, 1:2);
    err.loc.store=[err.loc.store; err.loc.val.max];
    
    %%
    %%
    if turnon == 1
        i_cnt=i_cnt+1;
        draw.row = 2;
        draw.col = 3;
%         figure(1)
%         titl.err_itpl=sprintf...
%             ('Error response surface from interpolation, initial point = [%d %d]', ...
%             pm.trial.val(1), pm.trial.val(2));
%         suptitle(titl.err_itpl)
%         subplot(draw.row, draw.col, i_cnt)
%         surf(linspace(domain.bond.L.I1, domain.bond.R.I1, domain.length.I1), ...
%             linspace(domain.bond.L.I2, domain.bond.R.I2, domain.length.I2), err.store.val');
%         xlabel('inclusion 1', 'FontSize', 18)
%         ylabel('inclusion 2', 'FontSize', 18)
%         zlabel('error', 'FontSize', 18)
%         set(gca,'fontsize',18)
%         set(gca, 'XScale', 'log')
%         set(gca, 'YScale', 'log')
%         set(gca, 'ZScale', 'log')
%         axis([1 2 1 2])
%         axi.lim = [0, err.max.val0];
%         zlim(axi.lim)
%         axis square
%         view([-60 30])
%         set(legend,'FontSize',8);
        %%
        figure(2)
%         titl.log_err_itpl=sprintf...
%             ('Log error response surface from interpolation, initial point = [%d %d]', ...
%             pm.trial.val(1), pm.trial.val(2));
%         suptitle(titl.log_err_itpl)
        subplot(draw.row, draw.col, i_cnt)
        surf(linspace(domain.bond.L.I1, domain.bond.R.I1, domain.length.I1), ...
            linspace(domain.bond.L.I2, domain.bond.R.I2, domain.length.I2), err.log_store.val');
        xlabel('inclusion 1', 'FontSize', 18)
        ylabel('inclusion 2', 'FontSize', 18)
        zlabel('log error', 'FontSize', 18)
        set(gca,'fontsize',18)
        set(gca, 'XScale', 'log')
        set(gca, 'YScale', 'log')
        set(gca, 'ZScale', 'log')
        axis([1 2 1 2])
        axi.log_lim = [-3.5, log10(err.max.val0)];
        zlim(axi.log_lim)
        axis square
        view([-60 30])
        set(legend,'FontSize',18);
        disp(err.max.val)
        disp(err.loc.val.max)
        %%
        if i_cnt>=6
            disp('iterations reach maximum plot number')
            break
        end
    end
    %%
    % compute approximation at max error point.
    MTX_K.RE.appr = MTX_K.RE.I1120S0*pm.space.comb(err.loc.idx.max, 3)+...
        MTX_K.RE.I1021S0*pm.space.comb(err.loc.idx.max, 4)+...
        MTX_K.RE.I1020S1*pm.fix.I3;
    [~, ~, ~, Dis.all.appr, ~, ~, ~, ~] = NewmarkBetaReducedMethod...
        (phi.fre.all, MTX_M.RE.iter, MTX_C.RE.iter, MTX_K.RE.appr, ...
        fce.RE.iter, NMcoef, time.step, time.max, ...
        Dis.RE.inpt, Vel.RE.inpt);
     
end