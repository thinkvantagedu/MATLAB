function [MTXinv_pre_ori_asmbl_block_hat] = GSAAssembleMTXInverse(pm_pre_val_block_hat, ...
    MTX_K_fre_OR_I11_I20_IS0, MTX_K_fre_OR_I10_I21_IS0, ...
    MTX_K_fre_OR_I10_I20_IS1, MTX_C_fre_OR_trial_loop, MTX_M_fre_OR_all, a1, a2, I3)
% output: inverse of assembled dynamic operators for Newmark method, size =
% DOF*DOF
MTXinv_pre_ori_asmbl_block_hat = ...
            zeros(size(pm_pre_val_block_hat, 1)*length(MTX_M_fre_OR_all), length(MTX_M_fre_OR_all));
        
for i_hat = 1:size(pm_pre_val_block_hat, 1)
    
    MTX_K_fre_OR_iter_hat =  MTX_K_fre_OR_I11_I20_IS0*pm_pre_val_block_hat(i_hat, 1)+...
        MTX_K_fre_OR_I10_I21_IS0*pm_pre_val_block_hat(i_hat, 2)+...
        MTX_K_fre_OR_I10_I20_IS1*I3;
    MTX_pre_ori_hat = MTX_K_fre_OR_iter_hat+a1*MTX_C_fre_OR_trial_loop+a2*MTX_M_fre_OR_all;
    MTX_pre_inv_hat = inv(MTX_pre_ori_hat);
    MTXinv_pre_ori_asmbl_block_hat((i_hat*length(MTX_pre_ori_hat)-...
        length(MTX_pre_ori_hat)+1):i_hat*length(MTX_pre_ori_hat), :)...
        = MTXinv_pre_ori_asmbl_block_hat((i_hat*length(MTX_pre_ori_hat)-...
        length(MTX_pre_ori_hat)+1):i_hat*length(MTX_pre_ori_hat), :)...
        +MTX_pre_inv_hat;
    
end